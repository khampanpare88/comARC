 lw 0 5 pos1            $5 = 1
 lw 0 1 n               $1 = memory[n]
 lw 0 2 r               $2 = memory[r]
 lw 0 6 cAddr           prepare to call combi. $6=combi
 jalr 6 4               call combi; $4=return address; $3=answer
 halt
combi sw 7 4 stack      save return address on stack
 add 7 5 7              increment stack pointer
 sw 7 1 stack           save $1 on stack
 add 7 5 7              increment stack pointer
 sw 7 2 stack           save $2 on stack
 add 7 5 7              increment stack pointer
 beq 0 2 else           if (r == 0) jump to else
 beq 1 2 else           if (r == n) jump to else
 lw 0 6 neg1            $6 = -1
 add 1 6 1              n = n-1
 add 2 6 2              r = r-1
 add 3 6 3              $3 = $3-1
 lw 0 6 cAddr           prepare to call combi. $6=combi
 jalr 6 4               call combi; $4=return address; $3=answer
 add 2 5 2              r = r+1
 lw 0 6 cAddr           prepare to call combi. $6=combi
 jalr 6 4               call combi; $4=return address; $3=answer
 lw 0 6 neg1            $6 = -1
 add 2 6 2              r = r-1
else add 5 3 3          $3 = $3+1
 lw 0 6 neg1            $6 = -1
 add 7 6 7              decrement stack pointer
 lw 7 2 stack           recover original $2
 add 7 6 7              decrement stack pointer
 lw 7 1 stack           recover original $1
 add 7 6 7              decrement stack pointer
 lw 7 4 stack           recover original return address
 jalr 4 6               return.  $6 is not restored.
n .fill 7               input n
r .fill 4               input r
pos1 .fill 1
neg1 .fill -1
zero .fill 0
cAddr .fill combi
stack .fill 0
